// Transcrypt'ed from Python, 2018-12-31 09:55:46
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
var __name__ = '__main__';
export var path = require ('path');
export var child_process = require ('child_process');
export var loader_utils = require ('loader-utils');
export var DEFAULT_PACKAGE_CONFIG = dict ({'command': 'python3 -m transcrypt', 'arguments': list (['--nomin', '--map', '--verbose'])});
export var main = function (src) {
	var config = dict ({});
	config.py_update (DEFAULT_PACKAGE_CONFIG);
	config.py_update (loader_utils.getOptions (this));
	var fileinfo = path.parse (this.resource);
	var relative_dir = path.relative (this.rootContext, fileinfo.dir);
	if (fileinfo.name == '__init__') {
		var py_module = relative_dir.py_split (path.sep).join ('.');
	}
	else {
		var py_module = path.join (relative_dir, fileinfo.name).py_split (path.sep).join ('.');
	}
	var target_path = path.join (this.rootContext, '__target__', py_module) + '.js';
	var import_path = './' + path.relative (fileinfo.dir, target_path);
	var runinfo_path = path.join (this.rootContext, '__target__', relative_dir, fileinfo.name) + '.transcrypt.json';
	var cmd = list ([]);
	cmd.append (config ['command']);
	cmd.extend (config ['arguments']);
	cmd.append ('"{}"'.format (py_module.py_replace ('"', '\\"')));
	var cmd_options = dict ({'cwd': this.rootContext, 'encoding': 'utf8'});
	try {
		var stdout = str (child_process.execSync (' '.join (cmd), cmd_options));
	}
	catch (__except0__) {
		if (isinstance (__except0__, object)) {
			var err = __except0__;
			console.log ('Error compiling {}: {}'.format (this.resource, err.stdout));
			__except0__.__cause__ = null;
			throw __except0__;
		}
		else {
			throw __except0__;
		}
	}
	return 'export * from "{}";'.format (import_path);
};
module.exports = main;

//# sourceMappingURL=index.map